//
// Decompiled by Jadx - 10

// By developer-krushna (https://github.com/developer-krushna/)

package Ut;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.os.Build;
import java.util.ArrayList;
import java.util.Iterator;

/* compiled from: com.google.android.play:review@@2.0.2 */
public final class v {
    private static final i a = new i("PhoneskyVerificationUtils");

    public static boolean a(Context context) {
        String str = "Play Store package is not found.";
        String str2 = "com.android.vending";
        try {
            if (context.getPackageManager().getApplicationInfo(str2, 0).enabled) {
                try {
                    Signature[] signatureArr = context.getPackageManager().getPackageInfo(str2, 64).signatures;
                    if (signatureArr != null) {
                        int length = signatureArr.length;
                        if (length != 0) {
                            ArrayList arrayList = new ArrayList();
                            int i = 0;
                            while (i < length) {
                                String a = u.a(signatureArr[i].toByteArray());
                                arrayList.add(a);
                                if (!"8P1sW0EPJcslw7UzRsiXL64w-O50Ed-RBICtay1g24M".equals(a)) {
                                    String str3 = Build.TAGS;
                                    if ((!str3.contains("dev-keys") && !str3.contains("test-keys")) || !"GXWy8XF3vIml3_MfnmSmyuKBpT3B0dWbHRR_4cgq-gA".equals(a)) {
                                        i++;
                                    }
                                }
                                return true;
                            }
                            i iVar = a;
                            StringBuilder stringBuilder = new StringBuilder();
                            Iterator it = arrayList.iterator();
                            if (it.hasNext()) {
                                while (true) {
                                    stringBuilder.append((CharSequence) it.next());
                                    if (!it.hasNext()) {
                                        break;
                                    }
                                    stringBuilder.append(", ");
                                }
                            }
                            iVar.d(String.format("Play Store package certs are not valid. Found these sha256 certs: [%s].", new Object[]{stringBuilder.toString()}), new Object[0]);
                        }
                    }
                    a.d("Play Store package is not signed -- possibly self-built package. Could not verify.", new Object[0]);
                } catch (NameNotFoundException unused) {
                    a.d(str, new Object[0]);
                }
            } else {
                a.d("Play Store package is disabled.", new Object[0]);
            }
        } catch (NameNotFoundException unused2) {
            a.d(str, new Object[0]);
        }
        return false;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 11

// By developer-krushna (https://github.com/developer-krushna/)

package Ss;

import Rs.m;
import android.annotation.TargetApi;
import android.app.AppOpsManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.graphics.drawable.Drawable;
import android.os.Binder;
import android.os.Process;
import com.google.errorprone.annotations.ResultIgnorabilityUnspecified;

/* compiled from: com.google.android.gms:play-services-basement@@18.3.0 */
public class d {
    protected final Context a;

    @TargetApi(19)
    public final boolean h(int i, String str) {
        if (m.d()) {
            try {
                AppOpsManager appOpsManager = (AppOpsManager) this.a.getSystemService("appops");
                if (appOpsManager != null) {
                    appOpsManager.checkPackage(i, str);
                    return true;
                }
                throw new NullPointerException("context.getSystemService(Context.APP_OPS_SERVICE) is null");
            } catch (SecurityException unused) {
                return false;
            }
        }
        String[] packagesForUid = this.a.getPackageManager().getPackagesForUid(i);
        if (!(str == null || packagesForUid == null)) {
            for (Object equals : packagesForUid) {
                if (str.equals(equals)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean g() {
        if (Binder.getCallingUid() == Process.myUid()) {
            return b.a(this.a);
        }
        if (m.i()) {
            String nameForUid = this.a.getPackageManager().getNameForUid(Binder.getCallingUid());
            if (nameForUid != null) {
                return c.a(this.a.getPackageManager(), nameForUid);
            }
        }
        return false;
    }

    @ResultIgnorabilityUnspecified
    public N.d<CharSequence, Drawable> e(String str) {
        ApplicationInfo applicationInfo = this.a.getPackageManager().getApplicationInfo(str, 0);
        return N.d.a(this.a.getPackageManager().getApplicationLabel(applicationInfo), this.a.getPackageManager().getApplicationIcon(applicationInfo));
    }

    public CharSequence d(String str) {
        Context context = this.a;
        return context.getPackageManager().getApplicationLabel(context.getPackageManager().getApplicationInfo(str, 0));
    }

    @ResultIgnorabilityUnspecified
    public int b(String str, String str2) {
        return this.a.getPackageManager().checkPermission(str, str2);
    }

    @ResultIgnorabilityUnspecified
    public ApplicationInfo c(String str, int i) {
        return this.a.getPackageManager().getApplicationInfo(str, i);
    }

    @ResultIgnorabilityUnspecified
    public PackageInfo f(String str, int i) {
        return this.a.getPackageManager().getPackageInfo(str, i);
    }

    public int a(String str) {
        return this.a.checkCallingOrSelfPermission(str);
    }

    public d(Context context) {
        this.a = context;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 11

// By developer-krushna (https://github.com/developer-krushna/)

package S;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.ServiceInfo;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.util.Log;
import java.util.ArrayList;
import java.util.List;
import kotlin.jvm.internal.m;
import qw.p;

/* compiled from: CredentialProviderFactory.kt */
public final class q {
    public static final a e = new a(null);
    private final Context a;
    private boolean b;
    private p c;
    private p d;

    private final p d(List<String> list, Context context) {
        p pVar = null;
        for (String cls : list) {
            try {
                Object newInstance = Class.forName(cls).getConstructor(new Class[]{Context.class}).newInstance(new Object[]{context});
                m.f(newInstance, "null cannot be cast to non-null type androidx.credentials.CredentialProvider");
                p pVar2 = (p) newInstance;
                if (!pVar2.isAvailableOnDevice()) {
                    continue;
                } else if (pVar != null) {
                    Log.i("CredProviderFactory", "Only one active OEM CredentialProvider allowed");
                    return null;
                } else {
                    pVar = pVar2;
                }
            } catch (Throwable unused) {
            }
        }
        return pVar;
    }

    private final List<String> a(Context context) {
        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 132);
        ArrayList arrayList = new ArrayList();
        ServiceInfo[] serviceInfoArr = packageInfo.services;
        if (serviceInfoArr != null) {
            m.g(serviceInfoArr, "packageInfo.services");
            for (ServiceInfo serviceInfo : serviceInfoArr) {
                Bundle bundle = serviceInfo.metaData;
                if (bundle != null) {
                    String string = bundle.getString("androidx.credentials.CREDENTIAL_PROVIDER_KEY");
                    if (string != null) {
                        arrayList.add(string);
                    }
                }
            }
        }
        return p.d0(arrayList);
    }

    private final p f() {
        if (this.b) {
            p pVar = this.d;
            if (pVar == null) {
                return null;
            }
            m.e(pVar);
            return pVar.isAvailableOnDevice() ? this.d : null;
        } else {
            List a = a(this.a);
            return a.isEmpty() ? null : d(a, this.a);
        }
    }

    private final p e() {
        if (this.b) {
            p pVar = this.c;
            if (pVar == null) {
                return null;
            }
            m.e(pVar);
            return pVar.isAvailableOnDevice() ? this.c : null;
        } else {
            I i = new I(this.a);
            return i.isAvailableOnDevice() ? i : null;
        }
    }

    public final p b(boolean z) {
        int i = VERSION.SDK_INT;
        if (i < 34) {
            return i <= 33 ? f() : null;
        } else {
            p e = e();
            return (e == null && z) ? f() : e;
        }
    }

    public static /* synthetic */ p c(q qVar, boolean z, int i, Object obj) {
        if ((i & 1) != 0) {
            z = true;
        }
        return qVar.b(z);
    }

    public q(Context context) {
        m.h(context, "context");
        this.a = context;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 9

// By developer-krushna (https://github.com/developer-krushna/)

package Rs;

import Js.k;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.util.Log;

/* compiled from: com.google.android.gms:play-services-basement@@18.3.0 */
public final class s {
    public static boolean a(Context context, int i) {
        String str = "com.google.android.gms";
        if (b(context, i, str)) {
            try {
                return k.a(context).b(context.getPackageManager().getPackageInfo(str, 64));
            } catch (NameNotFoundException unused) {
                String str2 = "UidVerifier";
                if (Log.isLoggable(str2, 3)) {
                    Log.d(str2, "Package manager can't find google play services package, defaulting to false");
                }
            }
        }
        return false;
    }

    @TargetApi(19)
    public static boolean b(Context context, int i, String str) {
        return k.a(context).h(i, str);
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 9

// By developer-krushna (https://github.com/developer-krushna/)

package Ot;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.os.Build;

/* compiled from: com.google.android.play:app-update@@2.1.0 */
public final class c {
    private static final s a = new s("PhoneskyVerificationUtils");

    public static boolean a(Context context) {
        String str = "com.android.vending";
        try {
            if (context.getPackageManager().getApplicationInfo(str, 0).enabled) {
                Signature[] signatureArr = context.getPackageManager().getPackageInfo(str, 64).signatures;
                if (signatureArr != null) {
                    int length = signatureArr.length;
                    if (length != 0) {
                        int i = 0;
                        while (i < length) {
                            String a = b.a(signatureArr[i].toByteArray());
                            if (!"8P1sW0EPJcslw7UzRsiXL64w-O50Ed-RBICtay1g24M".equals(a)) {
                                String str2 = Build.TAGS;
                                if ((!str2.contains("dev-keys") && !str2.contains("test-keys")) || !"GXWy8XF3vIml3_MfnmSmyuKBpT3B0dWbHRR_4cgq-gA".equals(a)) {
                                    i++;
                                }
                            }
                            return true;
                        }
                    }
                }
                a.e("Phonesky package is not signed -- possibly self-built package. Could not verify.", new Object[0]);
            }
        } catch (NameNotFoundException unused) {
        }
        return false;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 21

// By developer-krushna (https://github.com/developer-krushna/)

package Nt;

import Ot.D;
import Ot.c;
import Ot.o;
import Ot.s;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.BaseBundle;
import android.os.Bundle;
import com.google.android.play.core.install.InstallException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import mt.j;
import mt.k;
import mt.m;

/* compiled from: com.google.android.play:app-update@@2.1.0 */
final class w {
    private static final s e = new s("AppUpdateService");
    private static final Intent f = new s("com.google.android.play.core.install.BIND_UPDATE_SERVICE").setPackage("com.android.vending");
    D a;
    private final String b;
    private final Context c;
    private final y d;

    static /* bridge */ /* synthetic */ a f(w wVar, Bundle bundle, String str) {
        BaseBundle baseBundle = bundle;
        int i = baseBundle.getInt("version.code", -1);
        int i2 = baseBundle.getInt("update.availability");
        int i3 = baseBundle.getInt("install.status", 0);
        String str2 = "client.version.staleness";
        Integer valueOf = baseBundle.getInt(str2, -1) == -1 ? null : Integer.valueOf(baseBundle.getInt(str2));
        int i4 = baseBundle.getInt("in.app.update.priority", 0);
        long j = baseBundle.getLong("bytes.downloaded");
        long j2 = baseBundle.getLong("total.bytes.to.download");
        long j3 = baseBundle.getLong("additional.size.required");
        long a = wVar.d.a();
        str2 = "blocking.intent";
        PendingIntent pendingIntent = (PendingIntent) baseBundle.getParcelable(str2);
        String str3 = "nonblocking.intent";
        PendingIntent pendingIntent2 = (PendingIntent) baseBundle.getParcelable(str3);
        String str4 = "blocking.destructive.intent";
        PendingIntent pendingIntent3 = (PendingIntent) baseBundle.getParcelable(str4);
        int i5 = i;
        String str5 = "nonblocking.destructive.intent";
        PendingIntent pendingIntent4 = (PendingIntent) baseBundle.getParcelable(str5);
        int i6 = i2;
        HashMap hashMap = new HashMap();
        int i7 = i3;
        hashMap.put(str4, k(baseBundle.getIntegerArrayList("update.precondition.failures:blocking.destructive.intent")));
        hashMap.put(str5, k(baseBundle.getIntegerArrayList("update.precondition.failures:nonblocking.destructive.intent")));
        hashMap.put(str2, k(baseBundle.getIntegerArrayList("update.precondition.failures:blocking.intent")));
        hashMap.put(str3, k(baseBundle.getIntegerArrayList("update.precondition.failures:nonblocking.intent")));
        return a.g(str, i5, i6, i7, valueOf, i4, j, j2, j3, a, pendingIntent, pendingIntent2, pendingIntent3, pendingIntent4, hashMap);
    }

    private static Bundle i() {
        Bundle bundle = new Bundle();
        Bundle bundle2 = new Bundle();
        Map a = o.a("app_update");
        bundle2.putInt("playcore_version_code", ((Integer) a.get("java")).intValue());
        String str = "native";
        if (a.containsKey(str)) {
            bundle2.putInt("playcore_native_version", ((Integer) a.get(str)).intValue());
        }
        str = "unity";
        if (a.containsKey(str)) {
            bundle2.putInt("playcore_unity_version", ((Integer) a.get(str)).intValue());
        }
        bundle.putAll(bundle2);
        bundle.putInt("playcore.version.code", 11004);
        return bundle;
    }

    static /* bridge */ /* synthetic */ Bundle b(w wVar, String str) {
        Integer valueOf;
        Bundle bundle = new Bundle();
        bundle.putAll(i());
        bundle.putString("package.name", str);
        try {
            valueOf = Integer.valueOf(wVar.c.getPackageManager().getPackageInfo(wVar.c.getPackageName(), 0).versionCode);
        } catch (NameNotFoundException unused) {
            e.b("The current version of the app could not be retrieved", new Object[0]);
            valueOf = null;
        }
        if (valueOf != null) {
            bundle.putInt("app.version.code", valueOf.intValue());
        }
        return bundle;
    }

    public final j d(String str) {
        if (this.a == null) {
            return j();
        }
        e.d("completeUpdate(%s)", new Object[]{str});
        k kVar = new k();
        this.a.s(new s(this, kVar, kVar, str), kVar);
        return kVar.a();
    }

    public final j e(String str) {
        if (this.a == null) {
            return j();
        }
        e.d("requestUpdateInfo(%s)", new Object[]{str});
        k kVar = new k();
        this.a.s(new r(this, kVar, str, kVar), kVar);
        return kVar.a();
    }

    w(Context context, y yVar) {
        this.b = context.getPackageName();
        this.c = context;
        this.d = yVar;
        if (c.a(context)) {
            this.a = new D(c.a(context), e, "AppUpdateService", f, q.a, null);
        }
    }

    private static j j() {
        e.b("onError(%d)", new Object[]{Integer.valueOf(-9)});
        return m.d(new InstallException(-9));
    }

    private static HashSet k(ArrayList arrayList) {
        HashSet hashSet = new HashSet();
        if (arrayList != null) {
            hashSet.addAll(arrayList);
        }
        return hashSet;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 11

// By developer-krushna (https://github.com/developer-krushna/)

package Mu;

import Nu.b;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.os.Build;
import android.os.Build.VERSION;
import com.google.firebase.f;
import et.T0;
import java.util.Map;
import kotlin.jvm.internal.m;
import wu.a;
import yu.d;

/* compiled from: SessionEvents.kt */
public final class B {
    public static final B a = new B();
    private static final a b;

    public final b b(f fVar) {
        m.h(fVar, "firebaseApp");
        Context k = fVar.k();
        String str = "firebaseApp.applicationContext";
        m.g(k, str);
        String packageName = k.getPackageName();
        PackageInfo packageInfo = k.getPackageManager().getPackageInfo(packageName, 0);
        String valueOf = VERSION.SDK_INT >= 28 ? String.valueOf(T0.a(packageInfo)) : String.valueOf(packageInfo.versionCode);
        String c = fVar.n().c();
        m.g(c, "firebaseApp.options.applicationId");
        String str2 = Build.MODEL;
        m.g(str2, "MODEL");
        String str3 = c;
        c = VERSION.RELEASE;
        m.g(c, "RELEASE");
        String str4 = str2;
        u uVar = u.p;
        m.g(packageName, "packageName");
        String str5 = packageInfo.versionName;
        String str6 = str5 == null ? valueOf : str5;
        String str7 = Build.MANUFACTURER;
        m.g(str7, "MANUFACTURER");
        w wVar = w.a;
        Context k2 = fVar.k();
        m.g(k2, str);
        v d = wVar.d(k2);
        Context k3 = fVar.k();
        m.g(k3, str);
        return new b(str3, str4, "2.0.7", c, uVar, new a(packageName, str6, valueOf, str7, d, wVar.c(k3)));
    }

    public final A a(f fVar, z zVar, Ou.f fVar2, Map<b.a, ? extends b> map, String str, String str2) {
        Map<b.a, ? extends b> map2 = map;
        m.h(fVar, "firebaseApp");
        m.h(zVar, "sessionDetails");
        m.h(fVar2, "sessionsSettings");
        m.h(map2, "subscribers");
        String str3 = str;
        m.h(str3, "firebaseInstallationId");
        String str4 = str2;
        m.h(str4, "firebaseAuthenticationToken");
        j jVar = j.k;
        D d = new D(zVar.b(), zVar.a(), zVar.c(), zVar.d(), new f(d((b) map2.get(b.a.e)), d((b) map2.get(b.a.d)), fVar2.b()), str3, str4);
        return new A(jVar, r15, b(fVar));
    }

    static {
        a i = new d().j(c.a).k(true).i();
        m.g(i, "JsonDataEncoderBuilder()…lues(true)\n      .build()");
        b = i;
    }

    private final d d(b bVar) {
        if (bVar == null) {
            return d.k;
        }
        return bVar.a() ? d.n : d.p;
    }

    private B() {
    }

    public final a c() {
        return b;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 15

// By developer-krushna (https://github.com/developer-krushna/)

package L;

import I0.a;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ProviderInfo;
import android.content.pm.Signature;
import android.content.res.Resources;
import android.os.CancellationSignal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import s.j;

/* compiled from: FontProvider */
class e {
    private static final j<d, ProviderInfo> a = new j(2);
    private static final Comparator<byte[]> b = new c();

    static ProviderInfo f(PackageManager packageManager, f fVar, Resources resources) {
        a.c("FontProvider.getProvider");
        try {
            List d = d(fVar, resources);
            d dVar = new d(fVar.e(), fVar.f(), d);
            ProviderInfo providerInfo = (ProviderInfo) a.c(dVar);
            if (providerInfo != null) {
                return providerInfo;
            }
            String e = fVar.e();
            int i = 0;
            ProviderInfo resolveContentProvider = packageManager.resolveContentProvider(e, 0);
            if (resolveContentProvider == null) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("No package found for authority: ");
                stringBuilder.append(e);
                throw new NameNotFoundException(stringBuilder.toString());
            } else if (resolveContentProvider.packageName.equals(fVar.f())) {
                List b = b(packageManager.getPackageInfo(resolveContentProvider.packageName, 64).signatures);
                Collections.sort(b, b);
                while (i < d.size()) {
                    ArrayList arrayList = new ArrayList((Collection) d.get(i));
                    Collections.sort(arrayList, b);
                    if (c(b, arrayList)) {
                        a.d(dVar, resolveContentProvider);
                        a.f();
                        return resolveContentProvider;
                    }
                    i++;
                }
                a.f();
                return null;
            } else {
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Found content provider ");
                stringBuilder2.append(e);
                stringBuilder2.append(", but package was not ");
                stringBuilder2.append(fVar.f());
                throw new NameNotFoundException(stringBuilder2.toString());
            }
        } finally {
            a.f();
        }
    }

    static l.a e(Context context, List<f> list, CancellationSignal cancellationSignal) {
        a.c("FontProvider.getFontFamilyResult");
        try {
            l.a b;
            ArrayList arrayList = new ArrayList();
            for (int i = 0; i < list.size(); i++) {
                f fVar = (f) list.get(i);
                ProviderInfo f = f(context.getPackageManager(), fVar, context.getResources());
                if (f == null) {
                    b = l.a.b(1, null);
                    return b;
                }
                arrayList.add(g(context, fVar, f.authority, cancellationSignal));
            }
            b = l.a.a(0, arrayList);
            a.f();
            return b;
        } finally {
            a.f();
        }
    }

    private static boolean c(List<byte[]> list, List<byte[]> list2) {
        if (list.size() != list2.size()) {
            return false;
        }
        for (int i = 0; i < list.size(); i++) {
            if (!Arrays.equals((byte[]) list.get(i), (byte[]) list2.get(i))) {
                return false;
            }
        }
        return true;
    }

    public static /* synthetic */ int a(byte[] bArr, byte[] bArr2) {
        if (bArr.length != bArr2.length) {
            return bArr.length - bArr2.length;
        }
        for (int i = 0; i < bArr.length; i++) {
            byte b = bArr[i];
            byte b2 = bArr2[i];
            if (b != b2) {
                return b - b2;
            }
        }
        return 0;
    }

    private static List<byte[]> b(Signature[] signatureArr) {
        ArrayList arrayList = new ArrayList();
        for (Signature toByteArray : signatureArr) {
            arrayList.add(toByteArray.toByteArray());
        }
        return arrayList;
    }

    private static List<List<byte[]>> d(f fVar, Resources resources) {
        return fVar.b() != null ? fVar.b() : E.e.c(resources, fVar.c());
    }

    /*  JADX ERROR: Method load error
        k.core.utils.exceptions.DecodeException: Load method exception: k.dexlib2.dexbacked.instruction.DexBackedInstruction3rc cannot be cast to k.dexlib2.iface.instruction.formats.Instruction35c in method: L.e.g(android.content.Context, L.f, java.lang.String, android.os.CancellationSignal):L.l$b[], dex: 
        	at k.core.dex.nodes.MethodNode.load(Unknown Source:132)
        	at k.core.dex.nodes.ClassNode.load(Unknown Source:45)
        	at k.core.ProcessClass.process(Unknown Source:36)
        	at k.api.JadxDecompiler.processClass(Unknown Source:9)
        	at k.api.JavaClass.decompile(Unknown Source:25)
        Caused by: java.lang.ClassCastException: k.dexlib2.dexbacked.instruction.DexBackedInstruction3rc cannot be cast to k.dexlib2.iface.instruction.formats.Instruction35c
        	at k.core.dex.instructions.InsnDecoder.filledNewArray(Unknown Source:10)
        	at k.core.dex.instructions.InsnDecoder.decode(Unknown Source:2209)
        	at k.core.dex.instructions.InsnDecoder.process(Unknown Source:37)
        	at k.core.dex.nodes.MethodNode.load(Unknown Source:56)
        	... 4 more
        */
    static L.l.b[] g(android.content.Context r1, L.f r2, java.lang.String r3, android.os.CancellationSignal r4) {
        /*
        // Can't load method instructions: Load method exception: k.dexlib2.dexbacked.instruction.DexBackedInstruction3rc cannot be cast to k.dexlib2.iface.instruction.formats.Instruction35c in method: L.e.g(android.content.Context, L.f, java.lang.String, android.os.CancellationSignal):L.l$b[], dex: 
        */
        throw new UnsupportedOperationException("Method not decompiled: L.e.g(android.content.Context, L.f, java.lang.String, android.os.CancellationSignal):L.l$b[]");
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 10

// By developer-krushna (https://github.com/developer-krushna/)

package ku;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.os.Build.VERSION;
import et.T0;
import hu.f;
import java.util.List;

/* compiled from: AppData */
public class a {
    public final String a;
    public final String b;
    public final List<f> c;
    public final String d;
    public final String e;
    public final String f;
    public final String g;
    public final f h;

    public static a a(Context context, J j, String str, String str2, List<f> list, f fVar) {
        String packageName = context.getPackageName();
        String g = j.g();
        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(packageName, 0);
        String b = b(packageInfo);
        String str3 = packageInfo.versionName;
        if (str3 == null) {
            str3 = "0.0";
        }
        return new a(str, str2, list, g, packageName, b, str3, fVar);
    }

    private static String b(PackageInfo packageInfo) {
        return VERSION.SDK_INT >= 28 ? Long.toString(T0.a(packageInfo)) : Integer.toString(packageInfo.versionCode);
    }

    public a(String str, String str2, List<f> list, String str3, String str4, String str5, String str6, f fVar) {
        this.a = str;
        this.b = str2;
        this.c = list;
        this.d = str3;
        this.e = str4;
        this.f = str5;
        this.g = str6;
        this.h = fVar;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 12

// By developer-krushna (https://github.com/developer-krushna/)

package Js;

import Ms.p;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.util.Log;
import com.google.errorprone.annotations.RestrictedInheritance;

@RestrictedInheritance(allowedOnPath = ".*java.*/com/google/android/gms/common/testing/.*", explanation = "Sub classing of GMS Core's APIs are restricted to testing fakes.", link = "go/gmscore-restrictedinheritance")
/* compiled from: com.google.android.gms:play-services-basement@@18.3.0 */
public class k {
    private static k c;
    private final Context a;
    private volatile String b;

    @SuppressLint({"PackageManagerGetSignatures"})
    private final K f(String str, boolean z, boolean z2) {
        String str2 = "null pkg";
        if (str == null) {
            return K.c(str2);
        }
        if (str.equals(this.b)) {
            return K.b();
        }
        K b;
        if (A.e()) {
            b = A.b(str, j.e(this.a), false, false);
        } else {
            try {
                PackageInfo packageInfo = this.a.getPackageManager().getPackageInfo(str, 64);
                boolean e = j.e(this.a);
                if (packageInfo == null) {
                    b = K.c(str2);
                } else {
                    Signature[] signatureArr = packageInfo.signatures;
                    if (signatureArr != null) {
                        if (signatureArr.length == 1) {
                            x xVar = new x(packageInfo.signatures[0].toByteArray());
                            String str3 = packageInfo.packageName;
                            K a = A.a(str3, xVar, e, false);
                            if (a.a) {
                                ApplicationInfo applicationInfo = packageInfo.applicationInfo;
                                if (!(applicationInfo == null || (applicationInfo.flags & 2) == 0 || !A.a(str3, xVar, false, true).a)) {
                                    b = K.c("debuggable release cert app rejected");
                                }
                            }
                            b = a;
                        }
                    }
                    b = K.c("single cert required");
                }
            } catch (NameNotFoundException e2) {
                return K.d("no pkg ".concat(str), e2);
            }
        }
        if (b.a) {
            this.b = str;
        }
        return b;
    }

    /* JADX WARNING: Removed duplicated region for block: B:20:0x0039  */
    /* JADX WARNING: Removed duplicated region for block: B:19:0x0032  */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0047 A:{RETURN} */
    /* JADX WARNING: Missing block: B:6:0x0018, code:
            if ("com.google.android.gms".equals(r4.packageName) != false) goto L_0x001a;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final boolean e(PackageInfo packageInfo, boolean z) {
        PackageInfo packageInfo2;
        if (z) {
            if (packageInfo != null) {
                if (!"com.android.vending".equals(packageInfo.packageName)) {
                }
                ApplicationInfo applicationInfo = packageInfo.applicationInfo;
                z = (applicationInfo == null || (applicationInfo.flags & 129) == 0) ? false : true;
            } else {
                packageInfo2 = null;
                if (!(packageInfo == null || packageInfo2.signatures == null)) {
                    if ((z ? d(packageInfo2, z.a) : d(packageInfo2, z.a[0])) == null) {
                        return true;
                    }
                }
                return false;
            }
        }
        packageInfo2 = packageInfo;
        if (z) {
        }
        if ((z ? d(packageInfo2, z.a) : d(packageInfo2, z.a[0])) == null) {
            return false;
        }
    }

    static final w d(PackageInfo packageInfo, w... wVarArr) {
        Signature[] signatureArr = packageInfo.signatures;
        if (signatureArr != null) {
            if (signatureArr.length != 1) {
                Log.w("GoogleSignatureVerifier", "Package has more than one signature.");
                return null;
            }
            int i = 0;
            x xVar = new x(packageInfo.signatures[0].toByteArray());
            while (i < wVarArr.length) {
                if (wVarArr[i].equals(xVar)) {
                    return wVarArr[i];
                }
                i++;
            }
        }
        return null;
    }

    public boolean c(int i) {
        K k;
        String[] packagesForUid = this.a.getPackageManager().getPackagesForUid(i);
        if (packagesForUid != null) {
            if (r0 != 0) {
                k = null;
                for (String f : packagesForUid) {
                    k = f(f, false, false);
                    if (k.a) {
                        break;
                    }
                }
                p.l(k);
                k.e();
                return k.a;
            }
        }
        k = K.c("no pkgs");
        k.e();
        return k.a;
    }

    public boolean b(PackageInfo packageInfo) {
        if (packageInfo == null) {
            return false;
        }
        if (e(packageInfo, false)) {
            return true;
        }
        if (e(packageInfo, true)) {
            if (j.e(this.a)) {
                return true;
            }
            Log.w("GoogleSignatureVerifier", "Test-keys aren't accepted on this build.");
        }
        return false;
    }

    public static k a(Context context) {
        p.l(context);
        synchronized (k.class) {
            try {
                if (c == null) {
                    A.d(context);
                    c = new k(context);
                }
            } finally {
            }
        }
        return c;
    }

    public k(Context context) {
        this.a = context.getApplicationContext();
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 14

// By developer-krushna (https://github.com/developer-krushna/)

package Js;

import Ms.p;
import Rs.i;
import Rs.m;
import Rs.s;
import Rs.t;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageInstaller.SessionInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.UserManager;
import android.util.Log;
import com.google.android.gms.common.GooglePlayServicesIncorrectManifestValueException;
import com.google.android.gms.common.GooglePlayServicesMissingManifestValueException;
import java.util.concurrent.atomic.AtomicBoolean;

/* compiled from: com.google.android.gms:play-services-basement@@18.3.0 */
public class j {
    @Deprecated
    public static final int a = 12451000;
    @Deprecated
    static final AtomicBoolean b = new AtomicBoolean();
    private static boolean c;
    static boolean d;
    private static final AtomicBoolean e = new AtomicBoolean();

    /* JADX WARNING: Removed duplicated region for block: B:42:0x009a  */
    /* JADX WARNING: Removed duplicated region for block: B:41:0x008c  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @Deprecated
    public static int f(Context context, int i) {
        String str = "GooglePlayServicesUtil";
        try {
            context.getResources().getString(l.a);
        } catch (Throwable unused) {
            Log.e(str, "The Google Play services resources were not found. Check your project configuration to ensure that the resources are included.");
        }
        String str2 = "com.google.android.gms";
        if (!str2.equals(context.getPackageName())) {
            if (!e.get()) {
                int a = a(context);
                if (a == 0) {
                    throw new GooglePlayServicesMissingManifestValueException();
                } else if (a != a) {
                    throw new GooglePlayServicesIncorrectManifestValueException(a);
                }
            }
        }
        int i2 = 1;
        Object obj = (i.g(context) || i.i(context)) ? null : 1;
        p.a(i >= 0);
        String packageName = context.getPackageName();
        PackageManager packageManager = context.getPackageManager();
        Object packageInfo;
        PackageInfo packageInfo2;
        if (obj != null) {
            try {
                packageInfo = packageManager.getPackageInfo("com.android.vending", 8256);
                try {
                    packageInfo2 = packageManager.getPackageInfo(str2, 64);
                    a(context);
                    if (k.e(packageInfo2, true)) {
                        Log.w(str, String.valueOf(packageName).concat(" requires Google Play services, but their signature is invalid."));
                    } else {
                        if (obj != null) {
                            p.l(packageInfo);
                            if (!k.e(packageInfo, true)) {
                                Log.w(str, String.valueOf(packageName).concat(" requires Google Play Store, but its signature is invalid."));
                            }
                        }
                        if (obj == null || packageInfo == null || packageInfo.signatures[0].equals(packageInfo2.signatures[0])) {
                            if (t.a(packageInfo2.versionCode) < t.a(i)) {
                                int i3 = packageInfo2.versionCode;
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("Google Play services out of date for ");
                                stringBuilder.append(packageName);
                                stringBuilder.append(".  Requires ");
                                stringBuilder.append(i);
                                stringBuilder.append(" but found ");
                                stringBuilder.append(i3);
                                Log.w(str, stringBuilder.toString());
                                i2 = 2;
                            } else {
                                ApplicationInfo applicationInfo = packageInfo2.applicationInfo;
                                if (applicationInfo == null) {
                                    try {
                                        applicationInfo = packageManager.getApplicationInfo(str2, 0);
                                    } catch (NameNotFoundException e) {
                                        Log.wtf(str, String.valueOf(packageName).concat(" requires Google Play services, but they're missing when getting application info."), e);
                                    }
                                }
                                if (applicationInfo.enabled) {
                                    return 0;
                                }
                                i2 = 3;
                            }
                            return i2;
                        }
                        Log.w(str, String.valueOf(packageName).concat(" requires Google Play Store, but its signature doesn't match that of Google Play services."));
                    }
                } catch (NameNotFoundException unused2) {
                    Log.w(str, String.valueOf(packageName).concat(" requires Google Play services, but they are missing."));
                }
            } catch (NameNotFoundException unused3) {
                Log.w(str, String.valueOf(packageName).concat(" requires the Google Play Store, but it is missing."));
            }
        } else {
            packageInfo = null;
            packageInfo2 = packageManager.getPackageInfo(str2, 64);
            a(context);
            if (k.e(packageInfo2, true)) {
            }
        }
        i2 = 9;
        return i2;
    }

    @TargetApi(21)
    static boolean k(Context context, String str) {
        boolean equals = str.equals("com.google.android.gms");
        if (m.f()) {
            try {
                for (SessionInfo appPackageName : context.getPackageManager().getPackageInstaller().getAllSessions()) {
                    if (str.equals(appPackageName.getAppPackageName())) {
                        return true;
                    }
                }
            } catch (Exception unused) {
                return false;
            }
        }
        try {
            ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(str, 8192);
            if (equals) {
                return applicationInfo.enabled;
            }
            return applicationInfo.enabled && !h(context);
        } catch (NameNotFoundException unused2) {
        }
    }

    public static boolean e(Context context) {
        if (!d) {
            try {
                PackageInfo f = a(context).f("com.google.android.gms", 64);
                a(context);
                if (f == null || k.e(f, false) || !k.e(f, true)) {
                    c = false;
                } else {
                    c = true;
                }
                d = true;
            } catch (NameNotFoundException e) {
                Log.w("GooglePlayServicesUtil", "Cannot find Google Play services package name.", e);
                d = true;
            } catch (Throwable th) {
                d = true;
            }
        }
        if (!c) {
            if (i.e()) {
                return false;
            }
        }
        return true;
    }

    @TargetApi(18)
    public static boolean h(Context context) {
        if (m.c()) {
            Object systemService = context.getSystemService("user");
            p.l(systemService);
            Bundle applicationRestrictions = ((UserManager) systemService).getApplicationRestrictions(context.getPackageName());
            if (applicationRestrictions != null && "true".equals(applicationRestrictions.getString("restricted_profile"))) {
                return true;
            }
        }
        return false;
    }

    @Deprecated
    public static int a(Context context) {
        try {
            return context.getPackageManager().getPackageInfo("com.google.android.gms", 0).versionCode;
        } catch (NameNotFoundException unused) {
            Log.w("GooglePlayServicesUtil", "Google Play services is missing.");
            return 0;
        }
    }

    @Deprecated
    public static boolean g(Context context, int i) {
        if (i == 18) {
            return true;
        }
        return i == 1 ? k(context, "com.google.android.gms") : false;
    }

    @Deprecated
    public static boolean i(int i) {
        return i == 1 || i == 2 || i == 3 || i == 9;
    }

    public static Resources d(Context context) {
        try {
            return context.getPackageManager().getResourcesForApplication("com.google.android.gms");
        } catch (NameNotFoundException unused) {
            return null;
        }
    }

    public static Context c(Context context) {
        try {
            return context.createPackageContext("com.google.android.gms", 3);
        } catch (NameNotFoundException unused) {
            return null;
        }
    }

    @Deprecated
    public static String b(int i) {
        return b.u(i);
    }

    @TargetApi(19)
    @Deprecated
    public static boolean j(Context context, int i, String str) {
        return s.b(context, i, str);
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 17

// By developer-krushna (https://github.com/developer-krushna/)

package is;

import Js.h;
import Ms.p;
import Qs.b;
import Ys.e;
import Ys.f;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.RemoteException;
import android.os.SystemClock;
import android.util.Log;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.IOException;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;

/* compiled from: com.google.android.gms:play-services-ads-identifier@@17.1.0 */
public class a {
    Js.a a;
    f b;
    boolean c;
    final Object d;
    c e;
    private final Context f;
    final long g;

    @VisibleForTesting
    protected final void g(boolean z) {
        IOException iOException;
        p.k("Calling this from your main thread can lead to deadlock");
        synchronized (this) {
            try {
                if (this.c) {
                    f();
                }
                Context context = this.f;
                try {
                    context.getPackageManager().getPackageInfo("com.android.vending", 0);
                    int h = h.f().h(context, 12451000);
                    if (h != 0) {
                        if (h != 2) {
                            throw new IOException("Google Play services not available");
                        }
                    }
                    Js.a aVar = new Js.a();
                    Intent iOException2 = new IOException("com.google.android.gms.ads.identifier.service.START");
                    iOException2.setPackage("com.google.android.gms");
                    try {
                        if (b.b().a(context, iOException2, aVar, 1)) {
                            this.a = aVar;
                            try {
                                this.b = e.n0(aVar.a(10000, TimeUnit.MILLISECONDS));
                                this.c = true;
                                if (z) {
                                    j();
                                }
                            } catch (InterruptedException unused) {
                                throw new IOException("Interrupted exception");
                            } catch (Throwable th) {
                                iOException = new IOException(th);
                            }
                        }
                        throw new IOException("Connection failure");
                    } catch (Throwable th2) {
                        iOException = new IOException(th2);
                    }
                } catch (NameNotFoundException unused2) {
                    throw new GooglePlayServicesNotAvailableException(9);
                }
            } finally {
            }
        }
    }

    public static boolean c(Context context) {
        Throwable th;
        a aVar = new a(context, -1, false, false);
        try {
            boolean g;
            aVar.g(false);
            p.k("Calling this from your main thread can lead to deadlock");
            synchronized (aVar) {
                try {
                    if (!aVar.c) {
                        synchronized (aVar.d) {
                            try {
                                c cVar = aVar.e;
                                if (cVar == null || !cVar.n) {
                                    throw new IOException("AdvertisingIdClient is not connected.");
                                }
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        }
                        try {
                            aVar.g(false);
                            if (!aVar.c) {
                                throw new IOException("AdvertisingIdClient cannot reconnect.");
                            }
                        } catch (Throwable th22) {
                            throw new IOException("AdvertisingIdClient cannot reconnect.", th22);
                        }
                    }
                    p.l(aVar.a);
                    p.l(aVar.b);
                    try {
                        g = aVar.b.g();
                    } catch (Throwable th222) {
                        Log.i("AdvertisingIdClient", "GMS remote exception ", th222);
                        throw new IOException("Remote exception");
                    }
                } catch (Throwable th2222) {
                    th = th2222;
                }
            }
            aVar.j();
            aVar.f();
            return g;
        } catch (Throwable th22222) {
            th = th22222;
            aVar.f();
        }
    }

    private final a i(int i) {
        a aVar;
        p.k("Calling this from your main thread can lead to deadlock");
        synchronized (this) {
            if (!this.c) {
                synchronized (this.d) {
                    c cVar = this.e;
                    if (cVar == null || !cVar.n) {
                        throw new IOException("AdvertisingIdClient is not connected.");
                    }
                }
                try {
                    g(false);
                    if (!this.c) {
                        throw new IOException("AdvertisingIdClient cannot reconnect.");
                    }
                } catch (Exception e) {
                    throw new IOException("AdvertisingIdClient cannot reconnect.", e);
                }
            }
            p.l(this.a);
            p.l(this.b);
            try {
                aVar = new a(this.b.c(), this.b.O1(true));
            } catch (RemoteException e2) {
                Log.i("AdvertisingIdClient", "GMS remote exception ", e2);
                throw new IOException("Remote exception");
            }
        }
        j();
        return aVar;
    }

    @VisibleForTesting
    final boolean h(a aVar, boolean z, float f, long j, String str, Throwable th) {
        if (Math.random() > 0.0d) {
            return false;
        }
        HashMap hashMap = new HashMap();
        Object obj = "1";
        hashMap.put("app_context", obj);
        if (aVar != null) {
            if (true != aVar.b()) {
                obj = "0";
            }
            hashMap.put("limit_ad_tracking", obj);
            String a = aVar.a();
            if (a != null) {
                hashMap.put("ad_id_size", Integer.toString(a.length()));
            }
        }
        if (th != null) {
            hashMap.put("error", th.getClass().getName());
        }
        hashMap.put("tag", "AdvertisingIdClient");
        hashMap.put("time_spent", Long.toString(j));
        new b(this, hashMap).start();
        return true;
    }

    public static a a(Context context) {
        a aVar = new a(context, -1, true, false);
        try {
            long elapsedRealtime = SystemClock.elapsedRealtime();
            aVar.g(false);
            long elapsedRealtime2 = SystemClock.elapsedRealtime() - elapsedRealtime;
            a i = aVar.i(-1);
            aVar.h(i, true, 0.0f, elapsedRealtime2, "", null);
            aVar.f();
            return i;
        } catch (Throwable th) {
            Throwable th2 = th;
            aVar.f();
        }
    }

    /* JADX WARNING: Missing block: B:20:0x0034, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void f() {
        p.k("Calling this from your main thread can lead to deadlock");
        synchronized (this) {
            if (this.f != null) {
                if (this.a != null) {
                    try {
                        if (this.c) {
                            b.b().c(this.f, this.a);
                        }
                    } catch (Throwable th) {
                        Log.i("AdvertisingIdClient", "AdvertisingIdClient unbindService failed.", th);
                    }
                    this.c = false;
                    this.b = null;
                    this.a = null;
                }
            }
        }
    }

    public a b() {
        return i(-1);
    }

    public void e() {
        g(true);
    }

    protected final void finalize() {
        f();
        super.finalize();
    }

    @VisibleForTesting
    public a(Context context, long j, boolean z, boolean z2) {
        this.d = new Object();
        p.l(context);
        if (z) {
            Context applicationContext = context.getApplicationContext();
            if (applicationContext != null) {
                context = applicationContext;
            }
        }
        this.f = context;
        this.c = false;
        this.g = j;
    }

    public a(Context context) {
        this(context, 30000, false, false);
    }

    public static void d(boolean z) {
    }

    /*  JADX ERROR: NullPointerException in pass: BlockSplitter
        java.lang.NullPointerException: Attempt to invoke virtual method 'boolean k.core.dex.nodes.BlockNode.contains(k.core.dex.attributes.AType)' on a null object reference
        	at k.core.dex.visitors.blocksmaker.BlockSplitter.connectExceptionHandlers(Unknown Source:86)
        	at k.core.dex.visitors.blocksmaker.BlockSplitter.setupConnections(Unknown Source:76)
        	at k.core.dex.visitors.blocksmaker.BlockSplitter.splitBasicBlocks(Unknown Source:50)
        	at k.core.dex.visitors.blocksmaker.BlockSplitter.visit(Unknown Source:19)
        	at k.core.dex.visitors.DepthTraversal.visit(Unknown Source:14)
        	at k.core.dex.visitors.DepthTraversal.visit(Unknown Source:122)
        	at k.core.ProcessClass.process(Unknown Source:100)
        	at k.api.JadxDecompiler.processClass(Unknown Source:9)
        	at k.api.JavaClass.decompile(Unknown Source:25)
        */
    private final void j() {
        /*
        r6 = this;
        r0 = r6.d;
        monitor-enter(r0);
        r1 = r6.e;	 Catch:{ all -> 0x0012 }
        if (r1 == 0) goto L_0x0014;	 Catch:{ all -> 0x0012 }
    L_0x0007:
        r1 = r1.k;	 Catch:{ all -> 0x0012 }
        r1.countDown();	 Catch:{ all -> 0x0012 }
        r1 = r6.e;	 Catch:{ InterruptedException -> 0x0014 }
        r1.join();	 Catch:{ InterruptedException -> 0x0014 }
        goto L_0x0014;
        r1 = move-exception;
        goto L_0x0025;
    L_0x0014:
        r1 = r6.g;
        r3 = 0;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 <= 0) goto L_0x0023;
    L_0x001c:
        r3 = new is.c;
        r3.<init>(r6, r1);
        r6.e = r3;
    L_0x0023:
        monitor-exit(r0);
        return;
    L_0x0025:
        monitor-exit(r0);
        throw r1;
        */
        throw new UnsupportedOperationException("Method not decompiled: is.a.j():void");
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 139

// By developer-krushna (https://github.com/developer-krushna/)

package hv;

import android.content.Context;
import android.content.pm.PackageInfo;
import kotlin.jvm.internal.m;

/* compiled from: ContextExtension.kt */
public final class a {
    public static final String e(Context context, String str) {
        m.h(context, "$this$getStringResourceByName");
        m.h(str, "aString");
        int identifier = context.getResources().getIdentifier(str, "string", context.getPackageName());
        if (identifier == 0) {
            return "";
        }
        String string = context.getString(identifier);
        m.g(string, "getString(resId)");
        return string;
    }

    public static final Boolean a(Context context, Boolean bool, String str) {
        m.h(context, "$this$extractBooleanBundleOrResource");
        m.h(str, "resName");
        if (bool != null) {
            return bool;
        }
        String e = e(context, str);
        if (e.length() > 0) {
            try {
                return Boolean.valueOf(Boolean.parseBoolean(e));
            } catch (Exception unused) {
            }
        }
        return null;
    }

    public static final String b(Context context, String str, String str2) {
        m.h(context, "$this$extractStringBundleOrResource");
        m.h(str2, "resName");
        if (str != null) {
            return str;
        }
        String e = e(context, str2);
        return e.length() > 0 ? e : null;
    }

    public static final PackageInfo c(Context context) {
        m.h(context, "$this$getPackageInfo");
        try {
            return context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
        } catch (Exception unused) {
            return null;
        }
    }

    public static final int d(Context context, String str) {
        m.h(context, "$this$getRawResourceId");
        m.h(str, "aString");
        return context.getResources().getIdentifier(str, "raw", context.getPackageName());
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 25

// By developer-krushna (https://github.com/developer-krushna/)

package et;

import O.H0;
import Wt.a;
import Wt.d;
import android.app.Activity;
import android.app.Application;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.os.BaseBundle;
import android.os.Build;
import android.os.Build.VERSION;
import android.text.TextUtils;
import android.view.DisplayCutout;
import android.view.View;
import android.view.Window;
import android.view.WindowInsets;
import com.google.android.gms.internal.consent_sdk.zzg;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;

/* compiled from: com.google.android.ump:user-messaging-platform@@3.1.0 */
final class W0 {
    private final R0 a;
    private final Activity b;
    private final a c;
    private final d d;

    static /* bridge */ /* synthetic */ c0 a(W0 w0) {
        List arrayList;
        List list;
        PackageInfo packageInfo;
        c0 c0Var = new c0();
        String c = w0.d.c();
        String str = null;
        if (TextUtils.isEmpty(c)) {
            BaseBundle baseBundle;
            try {
                baseBundle = R0.a(w0.a).getPackageManager().getApplicationInfo(R0.a(w0.a).getPackageName(), 128).metaData;
            } catch (NameNotFoundException unused) {
                baseBundle = null;
            }
            if (baseBundle != null) {
                c = baseBundle.getString("com.google.android.gms.ads.APPLICATION_ID");
            }
            if (TextUtils.isEmpty(c)) {
                throw new zzg(3, "The UMP SDK requires a valid application ID in your AndroidManifest.xml through a com.google.android.gms.ads.APPLICATION_ID meta-data tag.\nExample AndroidManifest:\n    <meta-data\n        android:name=\"com.google.android.gms.ads.APPLICATION_ID\"\n        android:value=\"ca-app-pub-0000000000000000~0000000000\">");
            }
        }
        c0Var.a = c;
        if (w0.c.b()) {
            arrayList = new ArrayList();
            int a = w0.c.a();
            if (a == 1) {
                arrayList.add(X.k);
            } else if (a == 2) {
                arrayList.add(X.q);
            } else if (a == 3) {
                arrayList.add(X.n);
            } else if (a == 4) {
                arrayList.add(X.p);
            }
            arrayList.add(X.r);
        } else {
            arrayList = Collections.EMPTY_LIST;
        }
        c0Var.i = arrayList;
        c0Var.e = R0.b(w0.a).b();
        c0Var.d = Boolean.valueOf(w0.d.b());
        c0Var.c = Locale.getDefault().toLanguageTag();
        Y y = new Y();
        int i = VERSION.SDK_INT;
        y.b = Integer.valueOf(i);
        y.a = Build.MODEL;
        y.c = 2;
        c0Var.b = y;
        Configuration configuration = R0.a(w0.a).getResources().getConfiguration();
        R0.a(w0.a).getResources().getConfiguration();
        a0 a0Var = new a0();
        a0Var.a = Integer.valueOf(configuration.screenWidthDp);
        a0Var.b = Integer.valueOf(configuration.screenHeightDp);
        a0Var.c = Double.valueOf((double) R0.a(w0.a).getResources().getDisplayMetrics().density);
        if (i < 28) {
            list = Collections.EMPTY_LIST;
        } else {
            Activity activity = w0.b;
            Window window = activity == null ? null : activity.getWindow();
            View decorView = window == null ? null : window.getDecorView();
            WindowInsets a2 = decorView == null ? null : V0.a(decorView);
            DisplayCutout a3 = a2 == null ? null : H0.a(a2);
            if (a3 == null) {
                list = Collections.EMPTY_LIST;
            } else {
                U0.a(a3);
                ArrayList arrayList2 = new ArrayList();
                for (Rect rect : U0.a(a3)) {
                    if (rect != null) {
                        Z z = new Z();
                        z.b = Integer.valueOf(rect.left);
                        z.c = Integer.valueOf(rect.right);
                        z.a = Integer.valueOf(rect.top);
                        z.d = Integer.valueOf(rect.bottom);
                        arrayList2.add(z);
                    }
                }
                list = arrayList2;
            }
        }
        a0Var.d = list;
        c0Var.f = a0Var;
        R0 r0 = w0.a;
        Application a4 = R0.a(r0);
        try {
            packageInfo = R0.a(r0).getPackageManager().getPackageInfo(a4.getPackageName(), 0);
        } catch (NameNotFoundException unused2) {
            packageInfo = null;
        }
        V v = new V();
        v.a = a4.getPackageName();
        CharSequence applicationLabel = R0.a(w0.a).getPackageManager().getApplicationLabel(R0.a(w0.a).getApplicationInfo());
        if (applicationLabel != null) {
            str = applicationLabel.toString();
        }
        v.b = str;
        if (packageInfo != null) {
            v.c = Long.toString(VERSION.SDK_INT >= 28 ? T0.a(packageInfo) : (long) packageInfo.versionCode);
        }
        c0Var.g = v;
        b0 b0Var = new b0();
        b0Var.a = "3.1.0";
        c0Var.h = b0Var;
        return c0Var;
    }

    /* synthetic */ W0(R0 r0, Activity activity, a aVar, d dVar, S0 s0) {
        this.a = r0;
        this.b = activity;
        this.c = aVar;
        this.d = dVar;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 15

// By developer-krushna (https://github.com/developer-krushna/)

package dv;

import Dw.p;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageItemInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import gv.b;
import gv.d;
import hv.a;
import iv.l;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import kotlin.jvm.internal.m;
import pw.y;

/* compiled from: LibsFragmentCompat.kt */
public final class f$a extends AsyncTask<String, y, y> {
    private String a;
    private Integer b;
    private Drawable c;
    private Context d;
    final /* synthetic */ f e;

    /* JADX WARNING: Removed duplicated region for block: B:72:? A:{SYNTHETIC, RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x02c4  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected void a(String... strArr) {
        PackageItemInfo applicationInfo;
        PackageInfo packageInfo;
        m.h(strArr, "strings");
        c cVar = f.a(this.e).r().length == 0 ? new c(this.d, null, f.a(this.e).v(), 2, null) : new c(this.d, f.a(this.e).r(), f.a(this.e).v());
        d a = f.a(this.e);
        Boolean a2 = a.a(this.d, Boolean.valueOf(f.a(this.e).j()), "aboutLibraries_description_showIcon");
        a.N(a2 != null ? a2.booleanValue() : false);
        a = f.a(this.e);
        a2 = a.a(this.d, Boolean.valueOf(f.a(this.e).k()), "aboutLibraries_description_showVersion");
        a.O(a2 != null ? a2.booleanValue() : false);
        a = f.a(this.e);
        a2 = a.a(this.d, Boolean.valueOf(f.a(this.e).m()), "aboutLibraries_description_showVersionName");
        a.Q(a2 != null ? a2.booleanValue() : false);
        a = f.a(this.e);
        a2 = a.a(this.d, Boolean.valueOf(f.a(this.e).l()), "aboutLibraries_description_showVersionCode");
        a.P(a2 != null ? a2.booleanValue() : false);
        a = f.a(this.e);
        String b = a.b(this.d, f.a(this.e).a(), "aboutLibraries_description_name");
        String str = "";
        if (b == null) {
            b = str;
        }
        a.F(b);
        a = f.a(this.e);
        b = a.b(this.d, f.a(this.e).h(), "aboutLibraries_description_text");
        if (b != null) {
            str = b;
        }
        a.M(str);
        f.a(this.e).G(a.b(this.d, f.a(this.e).b(), "aboutLibraries_description_special1_name"));
        f.a(this.e).H(a.b(this.d, f.a(this.e).c(), "aboutLibraries_description_special1_text"));
        f.a(this.e).I(a.b(this.d, f.a(this.e).d(), "aboutLibraries_description_special2_name"));
        f.a(this.e).J(a.b(this.d, f.a(this.e).e(), "aboutLibraries_description_special2_text"));
        f.a(this.e).K(a.b(this.d, f.a(this.e).f(), "aboutLibraries_description_special3_name"));
        f.a(this.e).L(a.b(this.d, f.a(this.e).g(), "aboutLibraries_description_special3_text"));
        cVar.o(f.a(this.e).w());
        Object obj = 1;
        boolean z = f.a(this.e).B() && f.a(this.e).u() == null && f.b(this.e) == null;
        f fVar = this.e;
        f.e(fVar, cVar.p(this.d, f.a(fVar).s(), f.a(this.e).q(), f.a(this.e).o(), f.a(this.e).p(), z));
        if (f.b(this.e) != null) {
            Collections.sort(f.d(this.e), f.b(this.e));
        } else if (f.a(this.e).u() != null) {
            Collections.sort(f.d(this.e), f.a(this.e).u());
        }
        if (!(f.a(this.e).k() || f.a(this.e).m())) {
            if (!f.a(this.e).l()) {
                obj = null;
            }
        }
        if (f.a(this.e).j() && obj != null) {
            PackageManager packageManager = this.d.getPackageManager();
            b = this.d.getPackageName();
            try {
                applicationInfo = packageManager.getApplicationInfo(b, 0);
                try {
                    packageInfo = packageManager.getPackageInfo(b, 0);
                } catch (Exception unused) {
                }
            } catch (Exception unused2) {
                applicationInfo = null;
                packageInfo = null;
                this.c = applicationInfo.loadIcon(packageManager);
                this.a = null;
                this.b = null;
                if (packageInfo == null) {
                }
            }
            if (f.a(this.e).j() && applicationInfo != null) {
                this.c = applicationInfo.loadIcon(packageManager);
            }
            this.a = null;
            this.b = null;
            if (packageInfo == null) {
                this.a = packageInfo.versionName;
                this.b = Integer.valueOf(packageInfo.versionCode);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:16:0x008b  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    /* renamed from: b */
    protected void onPostExecute(y yVar) {
        Object obj;
        ArrayList arrayList;
        p c;
        Iterator it;
        m.h(yVar, "nothing");
        f.c(this.e).j();
        if (!(f.a(this.e).k() || f.a(this.e).m())) {
            if (!f.a(this.e).l()) {
                obj = null;
                if (f.a(this.e).j() && obj != null) {
                    f.c(this.e).h(new l[]{new gv.a(f.a(this.e)).s(this.a).r(this.b).q(this.c)});
                }
                arrayList = new ArrayList();
                c = e.d.c();
                it = f.d(this.e).iterator();
                while (it.hasNext()) {
                    fv.a aVar = (fv.a) it.next();
                    String str = "library";
                    if (c != null) {
                        m.g(aVar, str);
                        arrayList.add(c.invoke(aVar, f.a(this.e)));
                    } else if (f.a(this.e).i()) {
                        m.g(aVar, str);
                        arrayList.add(new d(aVar, f.a(this.e)));
                    } else {
                        m.g(aVar, str);
                        arrayList.add(new b(aVar, f.a(this.e)));
                    }
                }
                f.c(this.e).g(arrayList);
                super.onPostExecute(yVar);
                e.d.b();
            }
        }
        obj = 1;
        f.c(this.e).h(new l[]{new gv.a(f.a(this.e)).s(this.a).r(this.b).q(this.c)});
        arrayList = new ArrayList();
        c = e.d.c();
        it = f.d(this.e).iterator();
        while (it.hasNext()) {
        }
        f.c(this.e).g(arrayList);
        super.onPostExecute(yVar);
        e.d.b();
    }

    public f$a(f fVar, Context context) {
        m.h(context, "ctx");
        this.e = fVar;
        this.d = context;
    }

    public /* bridge */ /* synthetic */ Object doInBackground(Object[] objArr) {
        a((String[]) objArr);
        return y.a;
    }

    protected void onPreExecute() {
        e.d.b();
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

//
// Decompiled by Jadx - 15

// By developer-krushna (https://github.com/developer-krushna/)

package Ax;

import Ow.Z;
import Ow.i;
import Ow.t0;
import android.app.Application;
import androidx.lifecycle.E;
import androidx.lifecycle.H;
import androidx.lifecycle.a;
import androidx.lifecycle.f0;
import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;
import com.microsoft.identity.client.PublicClientApplication;
import java.util.List;
import java.util.Locale;
import kotlin.jvm.internal.m;
import mattecarra.chatcraft.ChatCraftApplication;
import mattecarra.chatcraft.database.ChatCraftRoomDatabase;
import pw.y;
import qx.h;
import ux.d;
import ux.k;
import ux.l;
import vw.e;
import yx.b;

/* compiled from: LoginActivityViewModel.kt */
public final class t extends a {
    private boolean K;
    private final int L;
    private IMultipleAccountPublicClientApplication M;
    private boolean N;
    private Boolean O;
    private final Application k;
    private final String n = "LoginActivityViewModel";
    private final qx.a p;
    private final h q;
    private final H<d[]> r;
    private final H<l> t;
    private final E<List<ux.a>> x;
    private final E<List<k>> y;

    public t(Application application) {
        m.h(application, "app");
        super(application);
        this.k = application;
        H a = b.a(new H(), new d[]{Zw.m.a.d()});
        this.r = a;
        H h = new H();
        this.t = h;
        this.K = true;
        this.L = application.getPackageManager().getPackageInfo(application.getPackageName(), 0).versionCode;
        PublicClientApplication.createMultipleAccountPublicClientApplication(application, 2131886176, new a(this));
        ChatCraftRoomDatabase b = ChatCraftRoomDatabase.p.b(application);
        qx.a Q = b.Q();
        this.p = Q;
        h S = b.S();
        this.q = S;
        this.x = Q.getAll();
        E all = S.getAll();
        this.y = all;
        h.q(all, new k(new r(this)));
        h.q(a, new k(new s(this)));
        i.d(f0.a(this), null, null, new b(this, null), 3, null);
    }

    public final Object M(boolean z, e<? super k[]> eVar) {
        vw.k kVar = new vw.k(ww.b.b(eVar));
        String language = Locale.getDefault().getLanguage();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("https://api.chatcraft.app/sponsored?language=");
        stringBuilder.append(language);
        stringBuilder.append("&isPremium=");
        stringBuilder.append(z);
        stringBuilder.append("&count=2");
        r1.i iVar = new r1.i(0, stringBuilder.toString(), null, new b(this, kVar), new g(kVar));
        Application application = this.k;
        ChatCraftApplication chatCraftApplication = application instanceof ChatCraftApplication ? (ChatCraftApplication) application : null;
        if (chatCraftApplication != null) {
            chatCraftApplication.a(iVar, this.n);
        }
        Object a = kVar.a();
        if (a == ww.b.c()) {
            kotlin.coroutines.jvm.internal.h.c(eVar);
        }
        return a;
    }

    public final void R(boolean z) {
        if (!this.N || !m.c(this.O, Boolean.valueOf(z))) {
            this.N = true;
            this.O = Boolean.valueOf(z);
            i.d(f0.a(this), null, null, new h(this, z, null), 3, null);
        }
    }

    public final Object S(ux.a aVar, e<? super s1.d<ux.a, ? extends Exception>> eVar) {
        vw.k kVar = new vw.k(ww.b.b(eVar));
        IMultipleAccountPublicClientApplication iMultipleAccountPublicClientApplication = this.M;
        if (iMultipleAccountPublicClientApplication != null) {
            String u = aVar.u();
            m.e(u);
            iMultipleAccountPublicClientApplication.getAccount(u, new i(kVar, this, aVar));
        }
        Object a = kVar.a();
        if (a == ww.b.c()) {
            kotlin.coroutines.jvm.internal.h.c(eVar);
        }
        return a;
    }

    public final t0 J(k kVar) {
        m.h(kVar, "server");
        return i.d(f0.a(this), null, null, new c(this, kVar, null), 3, null);
    }

    public final t0 K(ux.a aVar) {
        m.h(aVar, "account");
        return i.d(f0.a(this), null, null, new d(this, aVar, null), 3, null);
    }

    public final t0 T(k kVar) {
        m.h(kVar, "server");
        return i.d(f0.a(this), null, null, new c(this, kVar, null), 3, null);
    }

    public final t0 X(k kVar) {
        m.h(kVar, "server");
        return i.d(f0.a(this), null, null, new c(this, kVar, null), 3, null);
    }

    private static final y B(t tVar, List list) {
        if (list != null) {
            H h = tVar.t;
            l lVar = (l) h.f();
            if (lVar == null) {
                lVar = new l();
            }
            h.p(lVar.h(list));
        }
        return y.a;
    }

    private static final y C(t tVar, d[] dVarArr) {
        H h = tVar.t;
        l lVar = (l) h.f();
        if (lVar == null) {
            lVar = new l();
        }
        m.e(dVarArr);
        h.p(lVar.g(dVarArr));
        return y.a;
    }

    public final void V(boolean z) {
        H h = this.t;
        l lVar = (l) h.f();
        if (lVar == null) {
            lVar = new l();
        }
        h.p(lVar.f(z));
    }

    public final boolean Q() {
        l lVar = (l) this.t.f();
        return lVar != null ? lVar.b() : true;
    }

    public final Object W(ux.a aVar, e<? super y> eVar) {
        Object d = this.p.d(aVar, eVar);
        return d == ww.b.c() ? d : y.a;
    }

    private final Object L(d dVar, e<? super d> eVar) {
        return i.g(Z.b(), new e(dVar, this, null), eVar);
    }

    public final E<List<ux.a>> N() {
        return this.x;
    }

    public final IMultipleAccountPublicClientApplication O() {
        return this.M;
    }

    public final H<l> P() {
        return this.t;
    }

    public final void U(IMultipleAccountPublicClientApplication iMultipleAccountPublicClientApplication) {
        this.M = iMultipleAccountPublicClientApplication;
    }
}

// By developer-krushna (https://github.com/developer-krushna/)

